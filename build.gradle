buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven { url "https://plugins.gradle.org/m2/" }
		
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${pluginSpringBootGradle}"
		classpath "io.spring.gradle:dependency-management-plugin:${pluginDependencyManagement}"
		classpath "com.bmuschko:gradle-docker-plugin:${pluginGradleDocker}"
		classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:${pluginGradleGitProperties}"
	}
}

apply plugin: "java"
apply plugin: "application"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "com.gorylenko.gradle-git-properties"

group = "com.tricycle"
description = project.name
version = "${version}"
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion
[compileJava, compileTestJava]*.options*.encoding = "${encoding}"
applicationDefaultJvmArgs = [
		"-Dfile.encoding=${encoding}",
		"-Djava.net.preferIPv4Stack=true",
		"-XX:MaxMetaspaceSize=128m",
		"-Xms512m",
		"-Xmx512m",
		"-XX:+UseG1GC"
]
mainClassName = "com.tricycle.gate.GateApplication"

if (profile == "dev" || profile == "stage" || profile == "prod") {
	//profile 에 따른 jvm 옵션 설정
	applicationDefaultJvmArgs.addAll([
			"-Dspring.jpa.properties.hibernate.hbm2ddl.auto=none",
			"-verbose:gc",
			"-XX:+PrintGCDetails",
			"-XX:+PrintGCDetails",
			"-XX:+PrintGCDateStamps",
			"-Xloggc:/home/ec2-user/log/${project.name}/gc.log"
	])
}
System.setProperty("spring.profiles.active", profile)
println("profile: ${profile}")

wrapper {
	gradleVersion = "5.2.1"
	distributionType = Wrapper.DistributionType.BIN
}

configurations {
	compile.exclude module: "spring-boot-starter-tomcat"
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

bootDistZip {
	baseName = project.name
//  classifier = ""
//  appendix = ""
}

bootJar {
	enabled = true
}

jar {
	enabled = true
	manifest {
		attributes(
				"Implementation-Title": "${project.name}",
				"Implementation-Version": "${project.version}"
		)
	}
}

gitProperties {
	dateFormat = "yyyy-MM-dd HH:mm:ss"
	dateFormatTimeZone = "Asia/Seoul"
}



springBoot {
	buildInfo()
}

test {
	useJUnitPlatform()
	//개발 시에는 test OFF source 로 직접 호출은 가능 gradle build 시에만 무시
	enabled = false
}

repositories {
	jcenter()
	mavenCentral()
	maven { url "${mavenUrl}" }
}

dependencyManagement {
	imports {
		mavenBom              "org.springframework.cloud:spring-cloud-dependencies:${managementSpringCloudVersion}"
		mavenBom              "de.codecentric:spring-boot-admin-dependencies:${managementSpringBootAdmin}"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-undertow'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.3'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'mysql:mysql-connector-java'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	//providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	
	implementation 'com.zaxxer:HikariCP'
	implementation 'org.mariadb.jdbc:mariadb-java-client'
	
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.batch:spring-batch-test'
}

test {
	useJUnitPlatform()
}
